// Code generated by go-bindata.
// sources:
// templates/index.tpl.html
// DO NOT EDIT!

package service

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTplHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xc1\x8e\xd3\x30\x10\xbd\xf7\x2b\x2c\xb3\xdc\x48\x2a\x0e\x20\xb4\x4a\x73\x60\x91\x10\x07\xb8\xf0\x05\x6e\x3c\x6d\x2c\x26\x76\x64\x3b\x2d\xd5\x6a\xff\x9d\x71\x92\x66\xb3\x8e\x43\x41\xda\x1c\xbc\xdb\xe7\xf7\xa6\x6f\x66\x5e\xf3\xf8\xc8\x94\xae\xb0\x93\xc0\xf8\xc1\x1a\xed\x41\x4b\xce\x38\x8a\x8b\xe9\xfc\xb6\x06\x21\xc1\xe6\xbe\xc5\xbc\xf6\x0d\x72\xf6\xf4\xb4\xd9\x14\x52\x9d\x58\x85\xc2\xb9\x1d\x3f\x03\x22\x0b\x47\x86\x47\x5e\x6e\x18\x3d\xf3\x6b\x6b\xce\x9c\x39\x7f\x41\xd8\xf1\x56\x48\xa9\xf4\xf1\x9e\x7d\x6a\x7f\x8f\xd4\x98\x5e\x19\xcc\x1a\x99\x7d\xe4\x65\xe1\x3c\x99\x39\x96\x9f\x8d\x67\x5a\x34\x50\x6c\x47\xa0\xd8\x12\xff\x96\x9a\x9a\xca\x7f\xa2\xa8\x7e\xe5\x41\x4b\xa6\x9f\x81\xce\x22\x7d\x9e\x55\x99\xff\xfb\x9a\xce\x1f\x6a\xa1\x35\xa0\xfb\x3f\xe7\xd3\x75\x78\xc8\xb5\x15\xfa\x08\xec\x4e\xbd\x63\x77\xd5\x50\x90\xdd\xef\xae\xbd\x8c\x88\x0b\x5b\x89\x74\xea\x30\x09\xf2\x6f\xee\x3b\x34\x7b\xb0\x31\xad\x70\xad\xd0\x57\x0b\x28\xf6\x54\xbb\x3f\x33\xd7\x55\x15\x38\xc7\xcb\x37\x54\x69\x2a\xf3\x63\x18\x25\xf5\x43\xb2\x85\x51\x8a\x4d\xc2\x46\x84\x2e\xc7\x3e\xfe\x79\x91\x29\x2a\x4f\x56\xfa\x33\x93\x70\x10\x1d\xfa\x44\xb4\x86\xfb\x10\x50\x5a\x0d\x2f\x1f\x4c\xd3\x08\x2d\xdd\xca\x3a\x07\xf6\xde\xc8\xcb\xca\x02\xbd\xd8\x23\x64\x16\x5c\x6b\xb4\x53\x27\x88\x56\x51\xf4\xf7\x2f\xc8\x6c\x90\xd4\xe6\x04\x36\x62\x0f\x8a\xe0\x2d\x85\xdb\x25\x38\x0a\xd8\x59\x49\x5f\xef\xf8\xfb\x0f\x6f\xa7\x8e\x8a\xad\xaf\x57\x05\xe5\x17\x70\x95\x55\xad\x57\x46\xa7\x89\x84\x26\xbe\x2f\x70\x57\xdc\x85\x19\x2d\xf1\xe7\x28\x86\x5f\x54\x48\xe3\xe0\xae\x4f\xe3\x75\xf6\x71\x00\x6e\xb4\x2b\xcb\x3e\x5e\x83\x38\xff\x0a\x7e\x4a\x98\x4f\x38\x5b\xd1\xcc\x06\xb0\x2a\x4d\xcf\x20\x1d\xda\x91\xbf\x9c\x02\x81\x61\xdf\xe5\x3f\x84\xf9\xef\xef\xd4\x83\x31\x3e\x7a\xa7\xfe\x09\x00\x00\xff\xff\xfc\x5c\xcd\x4b\x85\x05\x00\x00")

func templatesIndexTplHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTplHtml,
		"templates/index.tpl.html",
	)
}

func templatesIndexTplHtml() (*asset, error) {
	bytes, err := templatesIndexTplHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl.html", size: 1413, mode: os.FileMode(420), modTime: time.Unix(1441722307, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl.html": templatesIndexTplHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl.html": &bintree{templatesIndexTplHtml, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, Prefix: k}
	}
	panic("unreachable")
}
